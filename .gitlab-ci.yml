stages:
  - build
  - deploy

variables:
  NODE_ENV: 'production'

cache:
  paths:
    - miniprojetoantoniosousa/node_modules/

# Job de build
build:
  stage: build
  image: node:21 # Usa a imagem oficial do Node.js 21
  script:
    - echo "Check out e configuração do Node.js"
    - npm install --prefix miniprojetoantoniosousa  # Instala as dependências no diretório específico
    - npx eslint . --prefix miniprojetoantoniosousa  # Executa o ESLint
    - npx prettier --check . --prefix miniprojetoantoniosousa  # Verifica formatação com Prettier
    - npx jest --coverage --passWithNoTests --prefix miniprojetoantoniosousa  # Executa os testes unitários
    - npx next build --prefix miniprojetoantoniosousa  # Constrói o projeto Next.js
  only:
    - main
  artifacts:
    paths:
      - miniprojetoantoniosousa/.next  # Armazena os arquivos de build para uso posterior
    expire_in: 1 week  # Opcional: define a duração de retenção dos artefatos

# Job de deploy
deploy:
  stage: deploy
  image: node:21  # Certifique-se de usar uma imagem Node.js para compatibilidade com o Vercel CLI
  script:
    - echo "Realizando o deploy no Vercel"
    - npm install --prefix miniprojetoantoniosousa  # Reinstala dependências se necessário
    - npx vercel --prod --token $VERCEL_TOKEN --prefix miniprojetoantoniosousa  # Deploy para o Vercel
  only:
    - main
  dependencies:
    - build
  environment:
    name: production
    url: https://your-vercel-project-url.com  # Substitua pelo URL do projeto Vercel

# Variáveis de ambiente do GitLab para conteúdo do Vercel e Contentful
before_script:
  - export VERCEL_ORG_ID=$VERCEL_ORG_ID
  - export VERCEL_PROJECT_ID=$VERCEL_PROJECT_ID
  - export CONTENTFUL_ACCESS_TOKEN=$CONTENTFUL_ACCESS_TOKEN
  - export CONTENTFUL_SPACE_ID=$CONTENTFUL_SPACE_ID
